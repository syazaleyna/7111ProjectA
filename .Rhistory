geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,4) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Cake Wash Fourier Analysis")
cakewashdailyB1.ts <- ts(filtercakewashdailyB1$data[100:200]) #change to time series
cakewashdailyB1.freq <- (1/(24*60*60))  #sample frequency in Hz
cakewashdailyB1.dur <- length(cakewashdailyB1.ts)*24*60*60 # length of signal in seconds
cakewashdailyB1.tot <- cakewashdailyB1.freq*cakewashdailyB1.dur #total number of sample
cakewashdailyB1.x <- seq(0, cakewashdailyB1.dur, length.out = tot)
cakewashdailyB1.fourier <- fft(cakewashdailyB1.ts)
cakewashdailyB1.amo <- 2*Mod(cakewashdailyB1.fourier)/(cakewashdailyB1.tot) #amplitude
cakewashdailyB1.freqvec <- 0:(length(cakewashdailyB1.amo)-1) #vector from 0 to end of signal -> new x-axis
cakewashdailyB1.amo[cakewashdailyB1.freqvec == 0] <-
cakewashdailyB1.amo[cakewashdailyB1.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
cakewashdailyB1.freqvec <- cakewashdailyB1.freqvec/cakewashdailyB1.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
cakewashdailyB1.dfFouri <- data.frame(freq = cakewashdailyB1.freqvec[1:as.integer(0.5*cakewashdailyB1.freq*cakewashdailyB1.dur)]*60*60*24,
amount = cakewashdailyB1.amo[1:as.integer(0.5*cakewashdailyB1.freq*cakewashdailyB1.dur)])
cakewashdailyB1.dfFouri <- cakewashdailyB1.dfFouri %>%
mutate(period = ifelse(cakewashdailyB1.dfFouri$amount >= 0.5,
paste(round(1/cakewashdailyB1.dfFouri$freq, 2),"days"),""))
cakewashdailyB1.dfFouri[1,3] <- ""
ggplot(cakewashdailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,1.5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Cake Wash Fourier Analysis")
# 1B soda filtrate conc.
sodafiltratedailyB1.ts <- ts(filtersodafiltratedailyB1$data[100:200]) #change to time series
sodafiltratedailyB1.freq <- (1/(24*60*60))  #sample frequency in Hz
sodafiltratedailyB1.dur <- length(sodafiltratedailyB1.ts)*24*60*60 # length of signal in seconds
sodafiltratedailyB1.tot <- sodafiltratedailyB1.freq*sodafiltratedailyB1.dur #total number of sample
sodafiltratedailyB1.x <- seq(0, sodafiltratedailyB1.dur, length.out = tot)
sodafiltratedailyB1.fourier <- fft(sodafiltratedailyB1.ts)
sodafiltratedailyB1.amo <- 2*Mod(sodafiltratedailyB1.fourier)/(sodafiltratedailyB1.tot) #amplitude
sodafiltratedailyB1.freqvec <- 0:(length(sodafiltratedailyB1.amo)-1) #vector from 0 to end of signal -> new x-axis
sodafiltratedailyB1.amo[sodafiltratedailyB1.freqvec == 0] <-
sodafiltratedailyB1.amo[sodafiltratedailyB1.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
sodafiltratedailyB1.freqvec <- sodafiltratedailyB1.freqvec/sodafiltratedailyB1.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
sodafiltratedailyB1.dfFouri <- data.frame(freq = sodafiltratedailyB1.freqvec[1:as.integer(0.5*sodafiltratedailyB1.freq*sodafiltratedailyB1.dur)]*60*60*24,
amount = sodafiltratedailyB1.amo[1:as.integer(0.5*sodafiltratedailyB1.freq*sodafiltratedailyB1.dur)])
sodafiltratedailyB1.dfFouri <- sodafiltratedailyB1.dfFouri %>%
mutate(period = ifelse(sodafiltratedailyB1.dfFouri$amount >= 1,
paste(round(1/sodafiltratedailyB1.dfFouri$freq, 2),"days"),""))
sodafiltratedailyB1.dfFouri[1,3] <- ""
ggplot(sodafiltratedailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,10) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Soda Filtrate Fourier Analysis")
ggplot(sodafiltratedailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Soda Filtrate Fourier Analysis")
oxfiltratedailyB1.ts <- ts(filteroxfiltratedailyB1$data[100:200]) #change to time series
oxfiltratedailyB1.freq <- (1/(24*60*60))  #sample frequency in Hz
oxfiltratedailyB1.dur <- length(oxfiltratedailyB1.ts)*24*60*60 # length of signal in seconds
oxfiltratedailyB1.tot <- oxfiltratedailyB1.freq*oxfiltratedailyB1.dur #total number of sample
oxfiltratedailyB1.x <- seq(0, oxfiltratedailyB1.dur, length.out = tot)
oxfiltratedailyB1.fourier <- fft(oxfiltratedailyB1.ts)
oxfiltratedailyB1.amo <- 2*Mod(oxfiltratedailyB1.fourier)/(oxfiltratedailyB1.tot) #amplitude
oxfiltratedailyB1.freqvec <- 0:(length(oxfiltratedailyB1.amo)-1) #vector from 0 to end of signal -> new x-axis
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0] <-
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
oxfiltratedailyB1.freqvec <- oxfiltratedailyB1.freqvec/oxfiltratedailyB1.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
oxfiltratedailyB1.dfFouri <- data.frame(freq = oxfiltratedailyB1.freqvec[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)]*60*60*24,
amount = oxfiltratedailyB1.amo[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)])
oxfiltratedailyB1.dfFouri <- oxfiltratedailyB1.dfFouri %>%
mutate(period = ifelse(oxfiltratedailyB1.dfFouri$amount >= 1,
paste(round(1/oxfiltratedailyB1.dfFouri$freq, 2),"days"),""))
oxfiltratedailyB1.dfFouri[1,3] <- ""
ggplot(oxfiltratedailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,4) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Oxalate Filtrate Fourier Analysis")
oxfiltratedailyB1.ts <- ts(filteroxfiltratedailyB1$data[100:200]) #change to time series
oxfiltratedailyB1.freq <- (1/(24*60*60))  #sample frequency in Hz
oxfiltratedailyB1.dur <- length(oxfiltratedailyB1.ts)*24*60*60 # length of signal in seconds
oxfiltratedailyB1.tot <- oxfiltratedailyB1.freq*oxfiltratedailyB1.dur #total number of sample
oxfiltratedailyB1.x <- seq(0, oxfiltratedailyB1.dur, length.out = tot)
oxfiltratedailyB1.fourier <- fft(oxfiltratedailyB1.ts)
oxfiltratedailyB1.amo <- 2*Mod(oxfiltratedailyB1.fourier)/(oxfiltratedailyB1.tot) #amplitude
oxfiltratedailyB1.freqvec <- 0:(length(oxfiltratedailyB1.amo)-1) #vector from 0 to end of signal -> new x-axis
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0] <-
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
oxfiltratedailyB1.freqvec <- oxfiltratedailyB1.freqvec/oxfiltratedailyB1.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
oxfiltratedailyB1.dfFouri <- data.frame(freq = oxfiltratedailyB1.freqvec[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)]*60*60*24,
amount = oxfiltratedailyB1.amo[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)])
oxfiltratedailyB1.dfFouri <- oxfiltratedailyB1.dfFouri %>%
mutate(period = ifelse(oxfiltratedailyB1.dfFouri$amount >= 0.8,
paste(round(1/oxfiltratedailyB1.dfFouri$freq, 2),"days"),""))
oxfiltratedailyB1.dfFouri[1,3] <- ""
ggplot(oxfiltratedailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,2) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Oxalate Filtrate Fourier Analysis")
ggplot(oxfiltratedailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,1.5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Oxalate Filtrate Fourier Analysis")
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0] <-
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
oxfiltratedailyB1.freqvec <- oxfiltratedailyB1.freqvec/oxfiltratedailyB1.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
oxfiltratedailyB1.dfFouri <- data.frame(freq = oxfiltratedailyB1.freqvec[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)]*60*60*24,
amount = oxfiltratedailyB1.amo[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)])
oxfiltratedailyB1.dfFouri <- oxfiltratedailyB1.dfFouri %>%
mutate(period = ifelse(oxfiltratedailyB1.dfFouri$amount >= 0.5,
paste(round(1/oxfiltratedailyB1.dfFouri$freq, 2),"days"),""))
oxfiltratedailyB1.dfFouri[1,3] <- ""
ggplot(oxfiltratedailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,1.5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Oxalate Filtrate Fourier Analysis")
oxfiltratedailyB1.ts <- ts(filteroxfiltratedailyB1$data[100:200]) #change to time series
oxfiltratedailyB1.freq <- (1/(24*60*60))  #sample frequency in Hz
oxfiltratedailyB1.dur <- length(oxfiltratedailyB1.ts)*24*60*60 # length of signal in seconds
oxfiltratedailyB1.tot <- oxfiltratedailyB1.freq*oxfiltratedailyB1.dur #total number of sample
oxfiltratedailyB1.x <- seq(0, oxfiltratedailyB1.dur, length.out = tot)
oxfiltratedailyB1.fourier <- fft(oxfiltratedailyB1.ts)
oxfiltratedailyB1.amo <- 2*Mod(oxfiltratedailyB1.fourier)/(oxfiltratedailyB1.tot) #amplitude
oxfiltratedailyB1.freqvec <- 0:(length(oxfiltratedailyB1.amo)-1) #vector from 0 to end of signal -> new x-axis
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0] <-
oxfiltratedailyB1.amo[oxfiltratedailyB1.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
oxfiltratedailyB1.freqvec <- oxfiltratedailyB1.freqvec/oxfiltratedailyB1.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
oxfiltratedailyB1.dfFouri <- data.frame(freq = oxfiltratedailyB1.freqvec[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)]*60*60*24,
amount = oxfiltratedailyB1.amo[1:as.integer(0.5*oxfiltratedailyB1.freq*oxfiltratedailyB1.dur)])
oxfiltratedailyB1.dfFouri <- oxfiltratedailyB1.dfFouri %>%
mutate(period = ifelse(oxfiltratedailyB1.dfFouri$amount >= 0.5,
paste(round(1/oxfiltratedailyB1.dfFouri$freq, 2),"days"),""))
oxfiltratedailyB1.dfFouri[1,3] <- ""
ggplot(oxfiltratedailyB1.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,1.5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="1B Drum Oxalate Filtrate Fourier Analysis")
feedflowdailyB2.ts <- ts(filterfeedflowdailyB2$data[100:200]) #change to time series
feedflowdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
feedflowdailyB2.dur <- length(feedflowdailyB2.ts)*24*60*60 # length of signal in seconds
feedflowdailyB2.tot <- feedflowdailyB2.freq*feedflowdailyB2.dur #total number of sample
feedflowdailyB2.x <- seq(0, feedflowdailyB2.dur, length.out = tot)
feedflowdailyB2.fourier <- fft(feedflowdailyB2.ts)
feedflowdailyB2.amo <- 2*Mod(feedflowdailyB2.fourier)/(feedflowdailyB2.tot) #amplitude
feedflowdailyB2.freqvec <- 0:(length(feedflowdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
feedflowdailyB2.amo[feedflowdailyB2.freqvec == 0] <-
feedflowdailyB2.amo[feedflowdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
feedflowdailyB2.freqvec <- feedflowdailyB2.freqvec/feedflowdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
feedflowdailyB2.dfFouri <- data.frame(freq = feedflowdailyB2.freqvec[1:as.integer(0.5*feedflowdailyB2.freq*feedflowdailyB2.dur)]*60*60*24,
amount = feedflowdailyB2.amo[1:as.integer(0.5*feedflowdailyB2.freq*feedflowdailyB2.dur)])
feedflowdailyB2.dfFouri <- feedflowdailyB2.dfFouri %>%
mutate(period = ifelse(feedflowdailyB2.dfFouri$amount >= 1,
paste(round(1/feedflowdailyB2.dfFouri$freq, 2),"days"),""))
feedflowdailyB2.dfFouri[1,3] <- ""
ggplot(feedflowdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,10) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Feed Flow Fourier Analysis")
ggplot(feedflowdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,12) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Feed Flow Fourier Analysis")
ggplot(feedflowdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,13) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Feed Flow Fourier Analysis")
ggplot(feedflowdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,15) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Feed Flow Fourier Analysis")
ggplot(feedflowdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,18) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Feed Flow Fourier Analysis")
# 2B drum speed
drumspeeddailyB2.ts <- ts(filterdrumspeeddailyB2$data[100:200]) #change to time series
drumspeeddailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
drumspeeddailyB2.dur <- length(drumspeeddailyB2.ts)*24*60*60 # length of signal in seconds
drumspeeddailyB2.tot <- drumspeeddailyB2.freq*drumspeeddailyB2.dur #total number of sample
drumspeeddailyB2.x <- seq(0, drumspeeddailyB2.dur, length.out = tot)
drumspeeddailyB2.fourier <- fft(drumspeeddailyB2.ts)
drumspeeddailyB2.amo <- 2*Mod(drumspeeddailyB2.fourier)/(drumspeeddailyB2.tot) #amplitude
drumspeeddailyB2.freqvec <- 0:(length(drumspeeddailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
drumspeeddailyB2.amo[drumspeeddailyB2.freqvec == 0] <-
drumspeeddailyB2.amo[drumspeeddailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
drumspeeddailyB2.freqvec <- drumspeeddailyB2.freqvec/drumspeeddailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
drumspeeddailyB2.dfFouri <- data.frame(freq = drumspeeddailyB2.freqvec[1:as.integer(0.5*drumspeeddailyB2.freq*drumspeeddailyB2.dur)]*60*60*24,
amount = drumspeeddailyB2.amo[1:as.integer(0.5*drumspeeddailyB2.freq*drumspeeddailyB2.dur)])
drumspeeddailyB2.dfFouri <- drumspeeddailyB2.dfFouri %>%
mutate(period = ifelse(drumspeeddailyB2.dfFouri$amount >= 1,
paste(round(1/drumspeeddailyB2.dfFouri$freq, 2),"days"),""))
drumspeeddailyB2.dfFouri[1,3] <- ""
ggplot(drumspeeddailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,10) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Speed Fourier Analysis")
# 2B drum speed
drumspeeddailyB2.ts <- ts(filterdrumspeeddailyB2$data[100:200]) #change to time series
drumspeeddailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
drumspeeddailyB2.dur <- length(drumspeeddailyB2.ts)*24*60*60 # length of signal in seconds
drumspeeddailyB2.tot <- drumspeeddailyB2.freq*drumspeeddailyB2.dur #total number of sample
drumspeeddailyB2.x <- seq(0, drumspeeddailyB2.dur, length.out = tot)
drumspeeddailyB2.fourier <- fft(drumspeeddailyB2.ts)
drumspeeddailyB2.amo <- 2*Mod(drumspeeddailyB2.fourier)/(drumspeeddailyB2.tot) #amplitude
drumspeeddailyB2.freqvec <- 0:(length(drumspeeddailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
drumspeeddailyB2.amo[drumspeeddailyB2.freqvec == 0] <-
drumspeeddailyB2.amo[drumspeeddailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
drumspeeddailyB2.freqvec <- drumspeeddailyB2.freqvec/drumspeeddailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
drumspeeddailyB2.dfFouri <- data.frame(freq = drumspeeddailyB2.freqvec[1:as.integer(0.5*drumspeeddailyB2.freq*drumspeeddailyB2.dur)]*60*60*24,
amount = drumspeeddailyB2.amo[1:as.integer(0.5*drumspeeddailyB2.freq*drumspeeddailyB2.dur)])
drumspeeddailyB2.dfFouri <- drumspeeddailyB2.dfFouri %>%
mutate(period = ifelse(drumspeeddailyB2.dfFouri$amount >= 0.1,
paste(round(1/drumspeeddailyB2.dfFouri$freq, 2),"days"),""))
drumspeeddailyB2.dfFouri[1,3] <- ""
ggplot(drumspeeddailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,0.3) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Speed Fourier Analysis")
bathleveldailyB2.ts <- ts(filterbathleveldailyB2$data[100:200]) #change to time series
bathleveldailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
bathleveldailyB2.dur <- length(bathleveldailyB2.ts)*24*60*60 # length of signal in seconds
bathleveldailyB2.tot <- bathleveldailyB2.freq*bathleveldailyB2.dur #total number of sample
bathleveldailyB2.x <- seq(0, bathleveldailyB2.dur, length.out = tot)
bathleveldailyB2.fourier <- fft(bathleveldailyB2.ts)
bathleveldailyB2.amo <- 2*Mod(bathleveldailyB2.fourier)/(bathleveldailyB2.tot) #amplitude
bathleveldailyB2.freqvec <- 0:(length(bathleveldailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
bathleveldailyB2.amo[bathleveldailyB2.freqvec == 0] <-
bathleveldailyB2.amo[bathleveldailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
bathleveldailyB2.freqvec <- bathleveldailyB2.freqvec/bathleveldailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
bathleveldailyB2.dfFouri <- data.frame(freq = bathleveldailyB2.freqvec[1:as.integer(0.5*bathleveldailyB2.freq*bathleveldailyB2.dur)]*60*60*24,
amount = bathleveldailyB2.amo[1:as.integer(0.5*bathleveldailyB2.freq*bathleveldailyB2.dur)])
bathleveldailyB2.dfFouri <- bathleveldailyB2.dfFouri %>%
mutate(period = ifelse(bathleveldailyB2.dfFouri$amount >= 1,
paste(round(1/bathleveldailyB2.dfFouri$freq, 2),"days"),""))
bathleveldailyB2.dfFouri[1,3] <- ""
ggplot(bathleveldailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,10) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Bath Level Fourier Analysis")
ggplot(bathleveldailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,7.5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Bath Level Fourier Analysis")
drumspeeddailyB2.ts <- ts(filterdrumspeeddailyB2$data[100:200]) #change to time series
drumspeeddailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
drumspeeddailyB2.dur <- length(drumspeeddailyB2.ts)*24*60*60 # length of signal in seconds
drumspeeddailyB2.tot <- drumspeeddailyB2.freq*drumspeeddailyB2.dur #total number of sample
drumspeeddailyB2.x <- seq(0, drumspeeddailyB2.dur, length.out = tot)
drumspeeddailyB2.fourier <- fft(drumspeeddailyB2.ts)
drumspeeddailyB2.amo <- 2*Mod(drumspeeddailyB2.fourier)/(drumspeeddailyB2.tot) #amplitude
drumspeeddailyB2.freqvec <- 0:(length(drumspeeddailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
drumspeeddailyB2.amo[drumspeeddailyB2.freqvec == 0] <-
drumspeeddailyB2.amo[drumspeeddailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
drumspeeddailyB2.freqvec <- drumspeeddailyB2.freqvec/drumspeeddailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
drumspeeddailyB2.dfFouri <- data.frame(freq = drumspeeddailyB2.freqvec[1:as.integer(0.5*drumspeeddailyB2.freq*drumspeeddailyB2.dur)]*60*60*24,
amount = drumspeeddailyB2.amo[1:as.integer(0.5*drumspeeddailyB2.freq*drumspeeddailyB2.dur)])
drumspeeddailyB2.dfFouri <- drumspeeddailyB2.dfFouri %>%
mutate(period = ifelse(drumspeeddailyB2.dfFouri$amount >= 0.08,
paste(round(1/drumspeeddailyB2.dfFouri$freq, 2),"days"),""))
drumspeeddailyB2.dfFouri[1,3] <- ""
ggplot(drumspeeddailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,0.25) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Speed Fourier Analysis")
feedflowdailyB2.ts <- ts(filterfeedflowdailyB2$data[100:200]) #change to time series
feedflowdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
feedflowdailyB2.dur <- length(feedflowdailyB2.ts)*24*60*60 # length of signal in seconds
feedflowdailyB2.tot <- feedflowdailyB2.freq*feedflowdailyB2.dur #total number of sample
feedflowdailyB2.x <- seq(0, feedflowdailyB2.dur, length.out = tot)
feedflowdailyB2.fourier <- fft(feedflowdailyB2.ts)
feedflowdailyB2.amo <- 2*Mod(feedflowdailyB2.fourier)/(feedflowdailyB2.tot) #amplitude
feedflowdailyB2.freqvec <- 0:(length(feedflowdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
feedflowdailyB2.amo[feedflowdailyB2.freqvec == 0] <-
feedflowdailyB2.amo[feedflowdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
feedflowdailyB2.freqvec <- feedflowdailyB2.freqvec/feedflowdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
feedflowdailyB2.dfFouri <- data.frame(freq = feedflowdailyB2.freqvec[1:as.integer(0.5*feedflowdailyB2.freq*feedflowdailyB2.dur)]*60*60*24,
amount = feedflowdailyB2.amo[1:as.integer(0.5*feedflowdailyB2.freq*feedflowdailyB2.dur)])
feedflowdailyB2.dfFouri <- feedflowdailyB2.dfFouri %>%
mutate(period = ifelse(feedflowdailyB2.dfFouri$amount >= 1,
paste(round(1/feedflowdailyB2.dfFouri$freq, 2),"days"),""))
feedflowdailyB2.dfFouri[1,3] <- ""
ggplot(feedflowdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,18) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Feed Flow Fourier Analysis")
vacuumdailyB2.ts <- ts(filtervacuumdailyB2$data) #change to time series
vacuumdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
vacuumdailyB2.dur <- length(vacuumdailyB2.ts)*24*60*60 # length of signal in seconds
vacuumdailyB2.tot <- vacuumdailyB2.freq*vacuumdailyB2.dur #total number of sample
vacuumdailyB2.x <- seq(0, vacuumdailyB2.dur, length.out = tot)
vacuumdailyB2.fourier <- fft(vacuumdailyB2.ts)
vacuumdailyB2.amo <- 2*Mod(vacuumdailyB2.fourier)/(vacuumdailyB2.tot) #amplitude
vacuumdailyB2.freqvec <- 0:(length(vacuumdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
vacuumdailyB2.amo[vacuumdailyB2.freqvec == 0] <-
vacuumdailyB2.amo[vacuumdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
vacuumdailyB2.freqvec <- vacuumdailyB2.freqvec/vacuumdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
vacuumdailyB2.dfFouri <- data.frame(freq = vacuumdailyB2.freqvec[1:as.integer(0.5*vacuumdailyB2.freq*vacuumdailyB2.dur)]*60*60*24,
amount = vacuumdailyB2.amo[1:as.integer(0.5*vacuumdailyB2.freq*vacuumdailyB2.dur)])
vacuumdailyB2.dfFouri <- vacuumdailyB2.dfFouri %>%
mutate(period = ifelse(vacuumdailyB2.dfFouri$amount >= 1,
paste(round(1/vacuumdailyB2.dfFouri$freq, 2),"days"),""))
vacuumdailyB2.dfFouri[1,3] <- ""
ggplot(vacuumdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,2) + ylim(0,10) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Vacuum Pressure Fourier Analysis")
# 2B vacuum
vacuumdailyB2.ts <- ts(filtervacuumdailyB2$data{100:200}) #change to time series
vacuumdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
vacuumdailyB2.dur <- length(vacuumdailyB2.ts)*24*60*60 # length of signal in seconds
vacuumdailyB2.tot <- vacuumdailyB2.freq*vacuumdailyB2.dur #total number of sample
vacuumdailyB2.x <- seq(0, vacuumdailyB2.dur, length.out = tot)
vacuumdailyB2.fourier <- fft(vacuumdailyB2.ts)
vacuumdailyB2.amo <- 2*Mod(vacuumdailyB2.fourier)/(vacuumdailyB2.tot) #amplitude
vacuumdailyB2.freqvec <- 0:(length(vacuumdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
vacuumdailyB2.amo[vacuumdailyB2.freqvec == 0] <-
vacuumdailyB2.amo[vacuumdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
vacuumdailyB2.freqvec <- vacuumdailyB2.freqvec/vacuumdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
vacuumdailyB2.dfFouri <- data.frame(freq = vacuumdailyB2.freqvec[1:as.integer(0.5*vacuumdailyB2.freq*vacuumdailyB2.dur)]*60*60*24,
amount = vacuumdailyB2.amo[1:as.integer(0.5*vacuumdailyB2.freq*vacuumdailyB2.dur)])
vacuumdailyB2.dfFouri <- vacuumdailyB2.dfFouri %>%
mutate(period = ifelse(vacuumdailyB2.dfFouri$amount >= 0.5,
paste(round(1/vacuumdailyB2.dfFouri$freq, 2),"days"),""))
vacuumdailyB2.dfFouri[1,3] <- ""
ggplot(vacuumdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,4) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Vacuum Pressure Fourier Analysis")
# 2B vacuum
vacuumdailyB2.ts <- ts(filtervacuumdailyB2$data[100:200]) #change to time series
vacuumdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
vacuumdailyB2.dur <- length(vacuumdailyB2.ts)*24*60*60 # length of signal in seconds
vacuumdailyB2.tot <- vacuumdailyB2.freq*vacuumdailyB2.dur #total number of sample
vacuumdailyB2.x <- seq(0, vacuumdailyB2.dur, length.out = tot)
vacuumdailyB2.fourier <- fft(vacuumdailyB2.ts)
vacuumdailyB2.amo <- 2*Mod(vacuumdailyB2.fourier)/(vacuumdailyB2.tot) #amplitude
vacuumdailyB2.freqvec <- 0:(length(vacuumdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
vacuumdailyB2.amo[vacuumdailyB2.freqvec == 0] <-
vacuumdailyB2.amo[vacuumdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
vacuumdailyB2.freqvec <- vacuumdailyB2.freqvec/vacuumdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
vacuumdailyB2.dfFouri <- data.frame(freq = vacuumdailyB2.freqvec[1:as.integer(0.5*vacuumdailyB2.freq*vacuumdailyB2.dur)]*60*60*24,
amount = vacuumdailyB2.amo[1:as.integer(0.5*vacuumdailyB2.freq*vacuumdailyB2.dur)])
vacuumdailyB2.dfFouri <- vacuumdailyB2.dfFouri %>%
mutate(period = ifelse(vacuumdailyB2.dfFouri$amount >= 0.5,
paste(round(1/vacuumdailyB2.dfFouri$freq, 2),"days"),""))
vacuumdailyB2.dfFouri[1,3] <- ""
ggplot(vacuumdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,4) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Vacuum Pressure Fourier Analysis")
ggplot(vacuumdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,2.5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Vacuum Pressure Fourier Analysis")
cakewashdailyB2.ts <- ts(filtercakewashdailyB2$data[100:200]) #change to time series
cakewashdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
cakewashdailyB2.dur <- length(cakewashdailyB2.ts)*24*60*60 # length of signal in seconds
cakewashdailyB2.tot <- cakewashdailyB2.freq*cakewashdailyB2.dur #total number of sample
cakewashdailyB2.x <- seq(0, cakewashdailyB2.dur, length.out = tot)
cakewashdailyB2.fourier <- fft(cakewashdailyB2.ts)
cakewashdailyB2.amo <- 2*Mod(cakewashdailyB2.fourier)/(cakewashdailyB2.tot) #amplitude
cakewashdailyB2.freqvec <- 0:(length(cakewashdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
cakewashdailyB2.amo[cakewashdailyB2.freqvec == 0] <-
cakewashdailyB2.amo[cakewashdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
cakewashdailyB2.freqvec <- cakewashdailyB2.freqvec/cakewashdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
cakewashdailyB2.dfFouri <- data.frame(freq = cakewashdailyB2.freqvec[1:as.integer(0.5*cakewashdailyB2.freq*cakewashdailyB2.dur)]*60*60*24,
amount = cakewashdailyB2.amo[1:as.integer(0.5*cakewashdailyB2.freq*cakewashdailyB2.dur)])
cakewashdailyB2.dfFouri <- cakewashdailyB2.dfFouri %>%
mutate(period = ifelse(cakewashdailyB2.dfFouri$amount >= 1,
paste(round(1/cakewashdailyB2.dfFouri$freq, 2),"days"),""))
cakewashdailyB2.dfFouri[1,3] <- ""
ggplot(cakewashdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,3) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Cake Wash Fourier Analysis")
cakewashdailyB2.ts <- ts(filtercakewashdailyB2$data[100:200]) #change to time series
cakewashdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
cakewashdailyB2.dur <- length(cakewashdailyB2.ts)*24*60*60 # length of signal in seconds
cakewashdailyB2.tot <- cakewashdailyB2.freq*cakewashdailyB2.dur #total number of sample
cakewashdailyB2.x <- seq(0, cakewashdailyB2.dur, length.out = tot)
cakewashdailyB2.fourier <- fft(cakewashdailyB2.ts)
cakewashdailyB2.amo <- 2*Mod(cakewashdailyB2.fourier)/(cakewashdailyB2.tot) #amplitude
cakewashdailyB2.freqvec <- 0:(length(cakewashdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
cakewashdailyB2.amo[cakewashdailyB2.freqvec == 0] <-
cakewashdailyB2.amo[cakewashdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
cakewashdailyB2.freqvec <- cakewashdailyB2.freqvec/cakewashdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
cakewashdailyB2.dfFouri <- data.frame(freq = cakewashdailyB2.freqvec[1:as.integer(0.5*cakewashdailyB2.freq*cakewashdailyB2.dur)]*60*60*24,
amount = cakewashdailyB2.amo[1:as.integer(0.5*cakewashdailyB2.freq*cakewashdailyB2.dur)])
cakewashdailyB2.dfFouri <- cakewashdailyB2.dfFouri %>%
mutate(period = ifelse(cakewashdailyB2.dfFouri$amount >= 0.5,
paste(round(1/cakewashdailyB2.dfFouri$freq, 2),"days"),""))
cakewashdailyB2.dfFouri[1,3] <- ""
ggplot(cakewashdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,2) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Cake Wash Fourier Analysis")
sodafiltratedailyB2.ts <- ts(filtersodafiltratedailyB2$data[100:200]) #change to time series
sodafiltratedailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
sodafiltratedailyB2.dur <- length(sodafiltratedailyB2.ts)*24*60*60 # length of signal in seconds
sodafiltratedailyB2.tot <- sodafiltratedailyB2.freq*sodafiltratedailyB2.dur #total number of sample
sodafiltratedailyB2.x <- seq(0, sodafiltratedailyB2.dur, length.out = tot)
sodafiltratedailyB2.fourier <- fft(sodafiltratedailyB2.ts)
sodafiltratedailyB2.amo <- 2*Mod(sodafiltratedailyB2.fourier)/(sodafiltratedailyB2.tot) #amplitude
sodafiltratedailyB2.freqvec <- 0:(length(sodafiltratedailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
sodafiltratedailyB2.amo[sodafiltratedailyB2.freqvec == 0] <-
sodafiltratedailyB2.amo[sodafiltratedailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
sodafiltratedailyB2.freqvec <- sodafiltratedailyB2.freqvec/sodafiltratedailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
sodafiltratedailyB2.dfFouri <- data.frame(freq = sodafiltratedailyB2.freqvec[1:as.integer(0.5*sodafiltratedailyB2.freq*sodafiltratedailyB2.dur)]*60*60*24,
amount = sodafiltratedailyB2.amo[1:as.integer(0.5*sodafiltratedailyB2.freq*sodafiltratedailyB2.dur)])
sodafiltratedailyB2.dfFouri <- sodafiltratedailyB2.dfFouri %>%
mutate(period = ifelse(sodafiltratedailyB2.dfFouri$amount >= 1,
paste(round(1/sodafiltratedailyB2.dfFouri$freq, 2),"days"),""))
sodafiltratedailyB2.dfFouri[1,3] <- ""
ggplot(sodafiltratedailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,10) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Soda Filtrate Fourier Analysis")
ggplot(sodafiltratedailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,8) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Soda Filtrate Fourier Analysis")
oxfiltratedailyB2.ts <- ts(filteroxfiltratedailyB2$data[100:200]) #change to time series
oxfiltratedailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
oxfiltratedailyB2.dur <- length(oxfiltratedailyB2.ts)*24*60*60 # length of signal in seconds
oxfiltratedailyB2.tot <- oxfiltratedailyB2.freq*oxfiltratedailyB2.dur #total number of sample
oxfiltratedailyB2.x <- seq(0, oxfiltratedailyB2.dur, length.out = tot)
oxfiltratedailyB2.fourier <- fft(oxfiltratedailyB2.ts)
oxfiltratedailyB2.amo <- 2*Mod(oxfiltratedailyB2.fourier)/(oxfiltratedailyB2.tot) #amplitude
oxfiltratedailyB2.freqvec <- 0:(length(oxfiltratedailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
oxfiltratedailyB2.amo[oxfiltratedailyB2.freqvec == 0] <-
oxfiltratedailyB2.amo[oxfiltratedailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
oxfiltratedailyB2.freqvec <- oxfiltratedailyB2.freqvec/oxfiltratedailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
oxfiltratedailyB2.dfFouri <- data.frame(freq = oxfiltratedailyB2.freqvec[1:as.integer(0.5*oxfiltratedailyB2.freq*oxfiltratedailyB2.dur)]*60*60*24,
amount = oxfiltratedailyB2.amo[1:as.integer(0.5*oxfiltratedailyB2.freq*oxfiltratedailyB2.dur)])
oxfiltratedailyB2.dfFouri <- oxfiltratedailyB2.dfFouri %>%
mutate(period = ifelse(oxfiltratedailyB2.dfFouri$amount >= 1,
paste(round(1/oxfiltratedailyB2.dfFouri$freq, 2),"days"),""))
oxfiltratedailyB2.dfFouri[1,3] <- ""
ggplot(oxfiltratedailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,3) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Oxalate Filtrate Fourier Analysis")
# 2B oxalate filtrate
oxfiltratedailyB2.ts <- ts(filteroxfiltratedailyB2$data[100:200]) #change to time series
oxfiltratedailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
oxfiltratedailyB2.dur <- length(oxfiltratedailyB2.ts)*24*60*60 # length of signal in seconds
oxfiltratedailyB2.tot <- oxfiltratedailyB2.freq*oxfiltratedailyB2.dur #total number of sample
oxfiltratedailyB2.x <- seq(0, oxfiltratedailyB2.dur, length.out = tot)
oxfiltratedailyB2.fourier <- fft(oxfiltratedailyB2.ts)
oxfiltratedailyB2.amo <- 2*Mod(oxfiltratedailyB2.fourier)/(oxfiltratedailyB2.tot) #amplitude
oxfiltratedailyB2.freqvec <- 0:(length(oxfiltratedailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
oxfiltratedailyB2.amo[oxfiltratedailyB2.freqvec == 0] <-
oxfiltratedailyB2.amo[oxfiltratedailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
oxfiltratedailyB2.freqvec <- oxfiltratedailyB2.freqvec/oxfiltratedailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
oxfiltratedailyB2.dfFouri <- data.frame(freq = oxfiltratedailyB2.freqvec[1:as.integer(0.5*oxfiltratedailyB2.freq*oxfiltratedailyB2.dur)]*60*60*24,
amount = oxfiltratedailyB2.amo[1:as.integer(0.5*oxfiltratedailyB2.freq*oxfiltratedailyB2.dur)])
oxfiltratedailyB2.dfFouri <- oxfiltratedailyB2.dfFouri %>%
mutate(period = ifelse(oxfiltratedailyB2.dfFouri$amount >= 0.5,
paste(round(1/oxfiltratedailyB2.dfFouri$freq, 2),"days"),""))
oxfiltratedailyB2.dfFouri[1,3] <- ""
ggplot(oxfiltratedailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,2.5) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Oxalate Filtrate Fourier Analysis")
# 2B soda filtrate conc.
sodafiltratemin2019B2.ts <- ts(sodafilt30min2019B2$data) #change to time series
# 2B cake wash
cakewashdailyB2.ts <- ts(cakewashdailyB2$data[100:200]) #change to time series
cakewashdailyB2.freq <- (1/(24*60*60))  #sample frequency in Hz
cakewashdailyB2.dur <- length(cakewashdailyB2.ts)*24*60*60 # length of signal in seconds
cakewashdailyB2.tot <- cakewashdailyB2.freq*cakewashdailyB2.dur #total number of sample
cakewashdailyB2.x <- seq(0, cakewashdailyB2.dur, length.out = tot)
cakewashdailyB2.fourier <- fft(cakewashdailyB2.ts)
cakewashdailyB2.amo <- 2*Mod(cakewashdailyB2.fourier)/(cakewashdailyB2.tot) #amplitude
cakewashdailyB2.freqvec <- 0:(length(cakewashdailyB2.amo)-1) #vector from 0 to end of signal -> new x-axis
cakewashdailyB2.amo[cakewashdailyB2.freqvec == 0] <-
cakewashdailyB2.amo[cakewashdailyB2.freqvec == 0]/2 #amplitude at the zero frequency has to be halfed at freq=0
cakewashdailyB2.freqvec <- cakewashdailyB2.freqvec/cakewashdailyB2.dur #vector divided by duration of the signal -> frequency vector -> new x-axis
cakewashdailyB2.dfFouri <- data.frame(freq = cakewashdailyB2.freqvec[1:as.integer(0.5*cakewashdailyB2.freq*cakewashdailyB2.dur)]*60*60*24,
amount = cakewashdailyB2.amo[1:as.integer(0.5*cakewashdailyB2.freq*cakewashdailyB2.dur)])
cakewashdailyB2.dfFouri <- cakewashdailyB2.dfFouri %>%
mutate(period = ifelse(cakewashdailyB2.dfFouri$amount >= 0.5,
paste(round(1/cakewashdailyB2.dfFouri$freq, 2),"days"),""))
cakewashdailyB2.dfFouri[1,3] <- ""
ggplot(cakewashdailyB2.dfFouri, aes(x = freq,y = amount)) +
geom_bar(stat = "identity", color = "black", fill = "white")+
geom_text(aes(label=period), hjust = -0.1, size = 3, angle = 90)+
xlim(0,0.5) + ylim(0,2) + labs(x ="Freq, 1/day",y ="Magnitude",
title ="2B Drum Cake Wash Fourier Analysis")
