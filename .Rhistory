filter(status == 'On') %>%
gather(type, data, outputspo:sodaconc)
#-------------------------------------------------------------------------------------------
#extract 1B data from 30min observation
status30min2019B1 <- seedwash30min2019$PO1BFOLXBDI
drumspeed30min2019B1 <- seedwash30min2019$PO1BFDrumSTPV
bathlevel30min2019B1 <- seedwash30min2019$PO1BFBathLCPV
vacuum30min2019B1 <- seedwash30min2019$PO1BVacPCPV
feedflow30min2019B1 <- seedwash30min2019$PO1BFRSFFCPV
flocflow30min2019B1 <- seedwash30min2019$PO1FlocFTPV...148
cakewash30min2019B1 <- seedwash30min2019$PO1BFCaSFTPV
clothwash30min2019B1 <- seedwash30min2019$PO1BFCoSFTPV
sodafilt30min2019B1 <- seedwash30min2019$PO1BFiltATPV
oxfilt30min2019B1 <- seedwash30min2019$PO1AN.Ox...160
data30min2019B1 <- data.frame(time = timestep30min2019,           #day
date = date30min2019,
status = status30min2019B1,
outputspo = outputspo30min2019,  #%
outputsoda = outputsoda30min2019,   #g/l
outputalumina = outputalumina30min2019, #kl/h
throughput = throughput30min2019,   #t/h
feedspo = spo30min2019,      #%
feedsoda = feedsoda30min2019,    #g/l
feeddensity = feeddensity30min2019, #SG
drumspeed = drumspeed30min2019B1,   #RPM
bathlevel = bathlevel30min2019B1,   #%
vacuum = vacuum30min2019B1,         #kPa
feedflow = feedflow30min2019B1,     #kl/h
flocflow = flocflow30min2019B1,     #kl/h
cakewash = cakewash30min2019B1,     #kl/h
clothwash = clothwash30min2019B1,   #kl/h
sodafiltrate = sodafilt30min2019B1, #g/l
oxfiltrate = oxfilt30min2019B1)     #g/l
multiple30min2019B1 <- data30min2019B1 %>%
filter(status == 'On') %>%
gather(type, data, outputspo:oxfiltrate)
#feed flow
feedflowmin2019B1 <- multiple30min2019B1 %>%
filter( type == 'feedflow')
ggplot(feedflowmin2019B1, aes(x=time, y=data, color = type)) + geom_line(alpha = 0.8) +
geom_smooth(method = lm) + xlab("Time (hour)") + ylab("Feed Flow (kl/h)") +
ggtitle("2019 Filter 1B Feed Flow")
#rosner test
rtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=100)
if (rtestfeedflowmin2019B1$n.outliers > 0){
finalrtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=rtestfeedflowmin2019B1$n.outliers)
filterfeedflowmin2019B1 <- feedflowmin2019B1[-c(finalrtestfeedflowmin2019B1$all.stats$Obs.Num),]
beforefeedflowmin2019B1 <- feedflowmin2019B1 %>%
mutate(outlier = "Before")
afterfeedflowmin2019B1 <- filterfeedflowmin2019B1 %>%
mutate(outlier = "After")
finalfilterfeedflowmin2019B1 <- rbind(beforefeedflowmin2019B1, afterfeedflowmin2019B1)
ggplot(finalfilterfeedflowmin2019B1, aes(x=time, y=data, color = outlier)) +
geom_point(aes(color = outlier)) + geom_line() +
scale_colour_manual(values=c("red", "blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") +
ggtitle("2019 Filter 1B Feed Flow")
ggplot(filterfeedflowmin2019B1, aes(x=time, y=data, color = type)) +
geom_line() + geom_point(aes(color = type)) +
scale_colour_manual(values=c("blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") + ylim(0,180) +
ggtitle("2019 Filter 1B Feed Flow (filtered)")
}
library(signal)
#rosner test
rtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=100)
library(EnvStats)
#rosner test
rtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=100)
if (rtestfeedflowmin2019B1$n.outliers > 0){
finalrtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=rtestfeedflowmin2019B1$n.outliers)
filterfeedflowmin2019B1 <- feedflowmin2019B1[-c(finalrtestfeedflowmin2019B1$all.stats$Obs.Num),]
beforefeedflowmin2019B1 <- feedflowmin2019B1 %>%
mutate(outlier = "Before")
afterfeedflowmin2019B1 <- filterfeedflowmin2019B1 %>%
mutate(outlier = "After")
finalfilterfeedflowmin2019B1 <- rbind(beforefeedflowmin2019B1, afterfeedflowmin2019B1)
ggplot(finalfilterfeedflowmin2019B1, aes(x=time, y=data, color = outlier)) +
geom_point(aes(color = outlier)) + geom_line() +
scale_colour_manual(values=c("red", "blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") +
ggtitle("2019 Filter 1B Feed Flow")
ggplot(filterfeedflowmin2019B1, aes(x=time, y=data, color = type)) +
geom_line() + geom_point(aes(color = type)) +
scale_colour_manual(values=c("blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") + ylim(0,180) +
ggtitle("2019 Filter 1B Feed Flow (filtered)")
}
#fourier analysis
filterfeedflowmin2019B1 <- na.omit(filterfeedflowmin2019B1)
ffeedflowmin2019B1 <- abs(fft(filterfeedflowmin2019B1$data))
freqffeedflowmin2019B1 <- 1/(filterfeedflowmin2019B1$time/24)
fourierfeedflowmin2019B1 <- cbind(fourier=ffeedflowmin2019B1,
freq=freqffeedflowmin2019B1,
filterfeedflowmin2019B1)
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/12),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=time, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/2),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/4),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/8),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/8),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
View(finalfourierfeedflowmin2019B1)
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[1:(length(fourierfeedflowmin2019B1$fourier)/8),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[2:(length(fourierfeedflowmin2019B1$fourier)/8),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
View(finalfourierfeedflowmin2019B1)
#rosner test
rtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=100)
if (rtestfeedflowmin2019B1$n.outliers > 0){
finalrtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=rtestfeedflowmin2019B1$n.outliers)
filterfeedflowmin2019B1 <- feedflowmin2019B1[-c(finalrtestfeedflowmin2019B1$all.stats$Obs.Num),]
beforefeedflowmin2019B1 <- feedflowmin2019B1 %>%
mutate(outlier = "Before")
afterfeedflowmin2019B1 <- filterfeedflowmin2019B1 %>%
mutate(outlier = "After")
finalfilterfeedflowmin2019B1 <- rbind(beforefeedflowmin2019B1, afterfeedflowmin2019B1)
ggplot(finalfilterfeedflowmin2019B1, aes(x=time, y=data, color = outlier)) +
geom_point(aes(color = outlier)) + geom_line() +
scale_colour_manual(values=c("red", "blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") +
ggtitle("2019 Filter 1B Feed Flow")
ggplot(filterfeedflowmin2019B1, aes(x=time, y=data, color = type)) +
geom_line() + geom_point(aes(color = type)) +
scale_colour_manual(values=c("blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") + ylim(0,180) +
ggtitle("2019 Filter 1B Feed Flow (filtered)")
}
ggplot(filterfeedflowmin2019B1, aes(x=date, y=data, color = type)) +
geom_line() + geom_point(aes(color = type)) +
scale_colour_manual(values=c("blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") + ylim(0,180) +
ggtitle("2019 Filter 1B Feed Flow (filtered)")
fourierfeedflowmin2019B1 <- cbind(fourier=ffeedflowmin2019B1,
freq=freqffeedflowmin2019B1,
filterfeedflowmin2019B1)
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[2:(length(fourierfeedflowmin2019B1$fourier)/8),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
#low filter
lowbf <- butter(8, 0.3, type = "low")
y1 <- filtfilt(lowbf, filterfeedflowmin2019B1$data)
lowpassfeedflowmin2019B1 <- data.frame(time = filterfeedflowmin2019B1$time,
filter = y1,
nofilter = filterfeedflowmin2019B1$data)
y1 <- filtfilt(lowbf, filterfeedflowmin2019B1$data)
#low filter
lowbf <- butter(8, 0.3, type = "low")
y1 <- filtfilt(lowbf, filterfeedflowmin2019B1$data)
#fourier analysis
filterfeedflowmin2019B1 <- na.omit(filterfeedflowmin2019B1)
y1 <- filtfilt(lowbf, filterfeedflowmin2019B1$data)
lowpassfeedflowmin2019B1 <- data.frame(time = filterfeedflowmin2019B1$time,
filter = y1,
nofilter = filterfeedflowmin2019B1$data)
lowpassfeedflowmin2019B1fin <- lowpassfeedflowmin2019B1 %>%
gather(type, level, filter:nofilter)
ggplot(lowpassfeedflowmin2019B1fin, aes(x=time, y=level, color = type, alpha = type)) +
geom_line() +
scale_alpha_manual(values=c(1,0.5)) +
scale_colour_manual(values=c("red", "blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") +
ggtitle("Low Pass Filter 2019 30 min Feed Flow")
if (rtestfeedflowmin2019B1$n.outliers > 0){
finalrtestfeedflowmin2019B1 <- rosnerTest(feedflowmin2019B1$data, k=rtestfeedflowmin2019B1$n.outliers)
filterfeedflowmin2019B1 <- feedflowmin2019B1[-c(finalrtestfeedflowmin2019B1$all.stats$Obs.Num),]
beforefeedflowmin2019B1 <- feedflowmin2019B1 %>%
mutate(outlier = "Before")
afterfeedflowmin2019B1 <- filterfeedflowmin2019B1 %>%
mutate(outlier = "After")
finalfilterfeedflowmin2019B1 <- rbind(beforefeedflowmin2019B1, afterfeedflowmin2019B1)
ggplot(finalfilterfeedflowmin2019B1, aes(x=time, y=data, color = outlier)) +
geom_point(aes(color = outlier)) + geom_line() +
scale_colour_manual(values=c("red", "blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") +
ggtitle("2019 Filter 1B Feed Flow")
ggplot(filterfeedflowmin2019B1, aes(x=date, y=data, color = type)) +
geom_line() + geom_point(aes(color = type)) +
scale_colour_manual(values=c("blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") + ylim(0,180) +
ggtitle("2019 Filter 1B Feed Flow (filtered)")
}
#low filter
lowbf <- butter(8, 0.1, type = "low")
y1 <- filtfilt(lowbf, filterfeedflowmin2019B1$data)
lowpassfeedflowmin2019B1 <- data.frame(time = filterfeedflowmin2019B1$time,
filter = y1,
nofilter = filterfeedflowmin2019B1$data)
lowpassfeedflowmin2019B1fin <- lowpassfeedflowmin2019B1 %>%
gather(type, level, filter:nofilter)
ggplot(lowpassfeedflowmin2019B1fin, aes(x=time, y=level, color = type, alpha = type)) +
geom_line() +
scale_alpha_manual(values=c(1,0.5)) +
scale_colour_manual(values=c("red", "blue")) +
xlab("Time (hour)") + ylab("Feed Flow (kl/h)") +
ggtitle("Low Pass Filter 2019 30 min Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[2:(length(fourierfeedflowmin2019B1$fourier)/4),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/4),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/2),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() + x_lim(0,2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() + xlim(0,2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() + xlim(0,0.2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() + xlim(0,0.2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col()  +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/4),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col()  +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/2),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col()  +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() + xlim(0,2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() + xlim(0,0.2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() + xlim(0.025,0.2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() + xlim(0.035,0.2) +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=date, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/4),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
finalfourierfeedflowmin2019B1 <- fourierfeedflowmin2019B1[3:(length(fourierfeedflowmin2019B1$fourier)/2),]
ggplot(finalfourierfeedflowmin2019B1, aes(x=freq, y=fourier)) + geom_col() +
xlab("Frequency (1/day)") + ylab("Magnitude") +
ggtitle("Fourier Transformation of 1B Feed Flow")
#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
#extract feed data from 30mins observation (2018)
outputspo30min2018 <- seedwash30min2018$PONthTkAN.Ox
outputsoda30min2018 <- seedwash30min2018$POSOFATPV.S
outputalumina30min2018 <- seedwash30min2018$TotalFlow
throughput30min2018 <- seedwash30min2018$POFeedMQPV
spo30min2018 <- seedwash30min2018$POFeedAN.Ox
feedsoda30min2018 <- seedwash30min2018$POFeedAN.C
feeddensity30min2018 <- seedwash30min2018$POFeedDTPV
date30min2018 <- seedwash30min2018$Date
timestep30min2018 <- seq(616, 0, by = -0.5)
data30min2018 <- data.frame(time = timestep30min2018,           #day
date = date30min2018,
outputspo = outputspo30min2018,  #%
outputsoda = outputsoda30min2018,   #g/l
outputalumina = outputalumina30min2018,#kl/h
throughput = throughput30min2018,   #t/h
feedspo = spo30min2018,          #%
feedsoda = feedsoda30min2018,    #g/l
feeddensity = feeddensity30min2018) #SG
multiple30min2018 <- data30min2018 %>%
gather(type, data, outputspo:feeddensity)
#-------------------------------------------------------------------------------------------
#extract 1B data from 30min observation
status30min2018B1 <- seedwash30min2018$PO1BFOLXBDI
drumspeed30min2018B1 <- seedwash30min2018$PO1BFDrumSTPV
bathlevel30min2018B1 <- seedwash30min2018$PO1BFBathLCPV
vacuum30min2018B1 <- seedwash30min2018$PO1BVacPCPV
feedflow30min2018B1 <- seedwash30min2018$PO1BFRSFFCPV
flocflow30min2018B1 <- seedwash30min2018$PO1FlocFTPV...148
cakewash30min2018B1 <- seedwash30min2018$PO1BFCaSFTPV
clothwash30min2018B1 <- seedwash30min2018$PO1BFCoSFTPV
sodafilt30min2018B1 <- seedwash30min2018$PO1BFiltATPV
oxfilt30min2018B1 <- seedwash30min2018$PO1AN.Ox...160
data30min2018B1 <- data.frame(time = timestep30min2018,           #day
date = date30min2018,
status = status30min2018B1,
outputspo = outputspo30min2018,  #%
outputsoda = outputsoda30min2018,   #g/l
outputalumina = outputalumina30min2018, #kl/h
throughput = throughput30min2018,   #t/h
feedspo = spo30min2018,      #%
feedsoda = feedsoda30min2018,    #g/l
feeddensity = feeddensity30min2018, #SG
drumspeed = drumspeed30min2018B1,   #RPM
bathlevel = bathlevel30min2018B1,   #%
vacuum = vacuum30min2018B1,         #kPa
feedflow = feedflow30min2018B1,     #kl/h
flocflow = flocflow30min2018B1,     #kl/h
cakewash = cakewash30min2018B1,     #kl/h
clothwash = clothwash30min2018B1,   #kl/h
sodafiltrate = sodafilt30min2018B1, #g/l
oxfiltrate = oxfilt30min2018B1)     #g/l
multiple30min2018B1 <- data30min2018B1 %>%
filter(status == 'On') %>%
gather(type, data, outputspo:oxfiltrate)
multiple30min2018B1 <- data30min2018B1 %>% filter(status == 'On') %>%
gather(type, data, outputspo:oxfiltrate)
multiple30min2018B1 <- data30min2018B1 %>%
filter(status == 'On') %>%
gather(type, data, outputspo:oxfiltrate)
data30min2018B1 <- data.frame(time = timestep30min2018,           #day
date = date30min2018,
status = status30min2018B1,
outputspo = outputspo30min2018,  #%
outputsoda = outputsoda30min2018,   #g/l
outputalumina = outputalumina30min2018, #kl/h
throughput = throughput30min2018,   #t/h
feedspo = spo30min2018,      #%
feedsoda = feedsoda30min2018,    #g/l
feeddensity = feeddensity30min2018, #SG
drumspeed = drumspeed30min2018B1,   #RPM
bathlevel = bathlevel30min2018B1,   #%
vacuum = vacuum30min2018B1,         #kPa
feedflow = feedflow30min2018B1,     #kl/h
flocflow = flocflow30min2018B1,     #kl/h
cakewash = cakewash30min2018B1,     #kl/h
clothwash = clothwash30min2018B1,   #kl/h
sodafiltrate = sodafilt30min2018B1, #g/l
oxfiltrate = oxfilt30min2018B1)     #g/l
multiple30min2018B1 <- data30min2018B1 %>%
filter(status == 'On') %>%
gather(type, data, outputspo:oxfiltrate)
#------------------------------------------------------------------------------------------------
#extract 1A data from 30mins observation
status30min2018A1 <- seedwash30min2018$PO1AFOLXBDI
drumspeed30min2018A1 <- seedwash30min2018$PO1AFDrumSTPV
bathlevel30min2018A1 <- seedwash30min2018$PO1ABathLCPV
vacuum30min2018A1 <- seedwash30min2018$PO1AVacPCPV
feedflow30min2018A1 <- seedwash30min2018$PO1FeedFCPV
flocflow30min2018A1 <- seedwash30min2018$PO1FlocFTPV...17
cakewash30min2018A1 <- seedwash30min2018$PO1ASprayFCPV
clothwash30min2018A1 <- seedwash30min2018$PO1AFCoSFTPV
sodafilt30min2018A1 <- seedwash30min2018$PO1AFltAN.C
oxfilt30min2018A1 <- seedwash30min2018$PO1AFltAN.Ox
#soda concentration in ton/hr
sodaconc30min2018A1 <- c(1:length(feedflow30min2018A1))
for (i in 1:length(sodaconc30min2018A1)){
sodaconc30min2018A1[i] <- feedflow30min2018A1[i]*modfeedsoda30min2018[i]/1000
}
data30min2018A1 <- data.frame(time = timestep30min2018,           #day
status = status30min2018A1,
outputspo = outputspo30min2018,     #%
outputsoda = outputsoda30min2018,   #g/l
outputalumina = outputalumina30min2018, #kl/h
throughput = throughput30min2018,   #t/h
feedspo = spo30min2018,      #%
feedsoda = feedsoda30min2018,    #g/l
feeddensity = feeddensity30min2018, #SG
drumspeed = drumspeed30min2018A1,   #RPM
bathlevel = bathlevel30min2018A1,   #%
vacuum = vacuum30min2018A1,         #kPa
feedflow = feedflow30min2018A1,     #kl/h
flocflow = flocflow30min2018A1,     #kl/h
cakewash = cakewash30min2018A1,     #kl/h
clothwash = clothwash30min2018A1,   #kl/h
sodafiltrate = sodafilt30min2018A1, #g/l
oxfiltrate = oxfilt30min2018A1,     #g/l
sodaconc = sodaconc30min2018A1)     #t/h
multiple30min2018A1 <- data30min2018A1 %>%
filter(status == 'On') %>%
gather(type, data, outputspo:sodaconc)
multiple30min2018A1 <- data30min2018A1 %>%
filter(data30min2018A1, status == 'On') %>%
gather(type, data, outputspo:sodaconc)
multiple30min2018A1 <- data30min2018A1 %>%
filter(status == 'On') %>%
gather(type, data, outputspo:sodaconc)
library(tidyverse)
library(readxl)
library(ggplot2)
library(tidyr)
library(dplyr)
#read seedwash 30 min data from excel
seedwash30min2016<-read_excel('Seedwash Data for UQ- 30min_2015_2019.xlsx', sheet="2015", skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation", "Argument is not a string or cell reference"))
seedwash30min2017<-read_excel('Seedwash Data for UQ- 30min - Data Only - Set 2_March15.xlsx', skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation"))
seedwash30min2018<-read_excel('Seedwash Data for UQ- 30min - Data Only_March14.xlsx', skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation"))
seedwash30min2019<-read_excel('Seedwash Data for UQ- 30min_2015_2019.xlsx', sheet="2019", skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation", "Argument is not a string or cell reference"))
#read seedwash 20 sec data from excel
seedwash20sec2017<-read_excel('Seedwash Data for UQ- 20Sec - Data Only - Set 2_March15.xlsx', skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation"))
seedwash20sec2018<-read_excel('Seedwash Data for UQ- 20Sec - Data Only_March14.xlsx', skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation"))
seedwash20sec2019<-read_excel('Seedwash Data for UQ- 20Sec_2019.xlsx', skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation"))
#read seedwash 1 day data from excel
seedwashdaily<-read_excel('SeedwashData_1day_2016_2019.xlsx', skip=6, na=c(""," ", "#N/A", "[-11059] No Good Data For Calculation"))
#---------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
#extract feed data from 30mins observation (2018)
outputspo30min2018 <- seedwash30min2018$PONthTkAN.Ox
outputsoda30min2018 <- seedwash30min2018$POSOFATPV.S
outputalumina30min2018 <- seedwash30min2018$TotalFlow
throughput30min2018 <- seedwash30min2018$POFeedMQPV
spo30min2018 <- seedwash30min2018$POFeedAN.Ox
feedsoda30min2018 <- seedwash30min2018$POFeedAN.C
feeddensity30min2018 <- seedwash30min2018$POFeedDTPV
date30min2018 <- seedwash30min2018$Date
timestep30min2018 <- seq(616, 0, by = -0.5)
data30min2018 <- data.frame(time = timestep30min2018,           #day
date = date30min2018,
outputspo = outputspo30min2018,  #%
outputsoda = outputsoda30min2018,   #g/l
outputalumina = outputalumina30min2018,#kl/h
throughput = throughput30min2018,   #t/h
feedspo = spo30min2018,          #%
feedsoda = feedsoda30min2018,    #g/l
feeddensity = feeddensity30min2018) #SG
multiple30min2018 <- data30min2018 %>%
gather(type, data, outputspo:feeddensity)
#------------------------------------------------------------------------------------------------
#extract 1A data from 30mins observation
status30min2018A1 <- seedwash30min2018$PO1AFOLXBDI
drumspeed30min2018A1 <- seedwash30min2018$PO1AFDrumSTPV
bathlevel30min2018A1 <- seedwash30min2018$PO1ABathLCPV
vacuum30min2018A1 <- seedwash30min2018$PO1AVacPCPV
feedflow30min2018A1 <- seedwash30min2018$PO1FeedFCPV
flocflow30min2018A1 <- seedwash30min2018$PO1FlocFTPV...17
cakewash30min2018A1 <- seedwash30min2018$PO1ASprayFCPV
clothwash30min2018A1 <- seedwash30min2018$PO1AFCoSFTPV
sodafilt30min2018A1 <- seedwash30min2018$PO1AFltAN.C
oxfilt30min2018A1 <- seedwash30min2018$PO1AFltAN.Ox
#soda concentration in ton/hr
sodaconc30min2018A1 <- c(1:length(feedflow30min2018A1))
for (i in 1:length(sodaconc30min2018A1)){
sodaconc30min2018A1[i] <- feedflow30min2018A1[i]*modfeedsoda30min2018[i]/1000
}
data30min2018A1 <- data.frame(time = timestep30min2018,           #day
status = status30min2018A1,
outputspo = outputspo30min2018,     #%
outputsoda = outputsoda30min2018,   #g/l
outputalumina = outputalumina30min2018, #kl/h
throughput = throughput30min2018,   #t/h
feedspo = spo30min2018,      #%
feedsoda = feedsoda30min2018,    #g/l
feeddensity = feeddensity30min2018, #SG
drumspeed = drumspeed30min2018A1,   #RPM
bathlevel = bathlevel30min2018A1,   #%
vacuum = vacuum30min2018A1,         #kPa
feedflow = feedflow30min2018A1,     #kl/h
flocflow = flocflow30min2018A1,     #kl/h
cakewash = cakewash30min2018A1,     #kl/h
clothwash = clothwash30min2018A1,   #kl/h
sodafiltrate = sodafilt30min2018A1, #g/l
oxfiltrate = oxfilt30min2018A1,     #g/l
sodaconc = sodaconc30min2018A1)     #t/h
multiple30min2018A1 <- data30min2018A1 %>%
filter(status == 'On') %>%
gather(type, data, outputspo:sodaconc)
multiple30min2018A1 <- data30min2018A1 %>%
gather(type, data, outputspo:sodaconc) %>%
filter(status == 'On')
multiple30min2018A1 <- data30min2018A1 %>%
gather(type, data, outputspo:sodaconc)
View(multiple30min2018A1)
multiple30min2018A1 <- multiple30min2018A1 %>%
filter(status == 'On')
multiple30min2018A1 <- filter(multiple30min2018A1, status == 'On')
